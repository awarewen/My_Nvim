let SessionLoad = 1
let s:cpo_save=&cpo
set cpo&vim
cnoremap <silent> <Plug>(TelescopeFuzzyCommandSearch) e "lua require('telescope.builtin').command_history { default_text = [=[" . escape(getcmdline(), '"') . "]=] }"
inoremap <silent> <C-S> <Cmd>w
inoremap <silent> <M-k> <Cmd>m .-2==gi
inoremap <silent> <M-j> <Cmd>m .+1==gi
inoremap <silent> <C-R> <Cmd>lua require("which-key").show("\18", {mode = "i", auto = true})
cnoremap <silent> <C-R> <Cmd>lua require("which-key").show("\18", {mode = "c", auto = true})
inoremap <expr> <BS> v:lua.MiniPairs.bs()
inoremap <C-W> u
inoremap <C-U> u
nnoremap <silent>  h
nnoremap <silent> <NL> j
nnoremap <silent>  k
nnoremap <silent>  l
snoremap <silent>  <Cmd>w
nnoremap <silent>  <Cmd>w
xnoremap <silent>  <Cmd>w
nnoremap <silent> √û <Nop>
nnoremap <silent>  <Cmd>lua require("which-key").show("\23", {mode = "n", auto = true})
tnoremap <silent>  
nnoremap <silent>  <Cmd>noh
nnoremap  sd <Cmd>Telescope diagnostics bufnr=0
nnoremap  : <Cmd>Telescope command_history
nnoremap  sD <Cmd>Telescope diagnostics
nnoremap  fb <Cmd>Telescope buffers
nnoremap  sh <Cmd>Telescope help_tags
nnoremap  fr <Cmd>Telescope oldfiles
nnoremap  sH <Cmd>Telescope highlights
nnoremap  gc <Cmd>Telescope git_commits
nnoremap  sk <Cmd>Telescope keymaps
nnoremap  gs <Cmd>Telescope git_status
nnoremap  sM <Cmd>Telescope man_pages
nnoremap  sa <Cmd>Telescope autocommands
nnoremap  sm <Cmd>Telescope marks
nnoremap  sb <Cmd>Telescope current_buffer_fuzzy_find
nnoremap  so <Cmd>Telescope vim_options
nnoremap  sc <Cmd>Telescope command_history
nnoremap  sR <Cmd>Telescope resume
nnoremap  sC <Cmd>Telescope commands
nnoremap  , <Cmd>Telescope buffers show_all_buffers=true
nnoremap <silent>  w√û <Nop>
nnoremap <silent>  w <Cmd>lua require("which-key").show(" w", {mode = "n", auto = true})
nnoremap <silent>  √û <Nop>
nnoremap <silent>   <Cmd>lua require("which-key").show(" ", {mode = "n", auto = true})
nmap  e  fe
nmap  E  fE
nnoremap  xt <Cmd>TodoTrouble
nnoremap  sT <Cmd>TodoTelescope keywords=TODO,FIX,FIXME
nnoremap  xT <Cmd>TodoTrouble keywords=TODO,FIX,FIXME
nnoremap  st <Cmd>TodoTelescope
nnoremap  cm <Cmd>Mason
nnoremap <silent>  	[ <Cmd>tabprevious
nnoremap <silent>  	d <Cmd>tabclose
nnoremap <silent>  	] <Cmd>tabnext
nnoremap <silent>  		 <Cmd>tabnew
nnoremap <silent>  	f <Cmd>tabfirst
nnoremap <silent>  	l <Cmd>tablast
nnoremap <silent>  | v
nnoremap <silent>  - s
nnoremap <silent>  w| v
nnoremap <silent>  w- s
nnoremap <silent>  wd c
nnoremap <silent>  ww p
nnoremap <silent>  qq <Cmd>qa
nnoremap <silent>  xq <Cmd>copen
nnoremap <silent>  xl <Cmd>lopen
nnoremap <silent>  fn <Cmd>enew
nnoremap <silent>  l <Cmd>:Lazy
nnoremap <silent>  ur <Cmd>nohlsearch|diffupdate|normal! 
nnoremap <silent>  ` <Cmd>e #
nnoremap <silent>  bb <Cmd>e #
nnoremap  bP <Cmd>BufferLineGroupClose ungrouped
nnoremap  bp <Cmd>BufferLineTogglePin
xnoremap <silent>  c√û <Nop>
xnoremap <silent>  gh√û <Nop>
xnoremap <silent>  g√û <Nop>
xnoremap <silent>  sn√û <Nop>
xnoremap <silent>  s√û <Nop>
xnoremap <silent>  	√û <Nop>
xnoremap <silent>  x√û <Nop>
xnoremap <silent>  b√û <Nop>
xnoremap <silent>  f√û <Nop>
xnoremap <silent>  w√û <Nop>
xnoremap <silent>  u√û <Nop>
xnoremap <silent>  q√û <Nop>
xnoremap <silent>  √û <Nop>
xnoremap <silent>   <Cmd>lua require("which-key").show(" ", {mode = "v", auto = true})
nnoremap <silent>  gh√û <Nop>
nnoremap <silent>  	√û <Nop>
nnoremap <silent>  sn√û <Nop>
nnoremap <silent>  s√û <Nop>
nnoremap <silent>  x√û <Nop>
nnoremap <silent>  f√û <Nop>
nnoremap <silent>  b√û <Nop>
nnoremap <silent>  g√û <Nop>
nnoremap <silent>  c√û <Nop>
nnoremap <silent>  u√û <Nop>
nnoremap <silent>  q√û <Nop>
nnoremap <silent> !a√û <Nop>
nnoremap <silent> !i√û <Nop>
nnoremap <silent> !√û <Nop>
nnoremap <silent> ! <Cmd>lua require("which-key").show("!", {mode = "n", auto = true})
xnoremap <silent> " <Cmd>lua require("which-key").show("\"", {mode = "v", auto = true})
nnoremap <silent> " <Cmd>lua require("which-key").show("\"", {mode = "n", auto = true})
xnoremap # y?\V"
omap <silent> % <Plug>(MatchitOperationForward)
xmap <silent> % <Plug>(MatchitVisualForward)
nmap <silent> % <Plug>(MatchitNormalForward)
nnoremap & :&&
nnoremap <silent> ' <Cmd>lua require("which-key").show("'", {mode = "n", auto = true})
xnoremap * y/\V"
vnoremap <silent> < <gv
nnoremap <silent> <a√û <Nop>
nnoremap <silent> <i√û <Nop>
nnoremap <silent> <√û <Nop>
nnoremap <silent> < <Cmd>lua require("which-key").show("<", {mode = "n", auto = true})
vnoremap <silent> > >gv
nnoremap <silent> >a√û <Nop>
nnoremap <silent> >i√û <Nop>
nnoremap <silent> >√û <Nop>
nnoremap <silent> > <Cmd>lua require("which-key").show(">", {mode = "n", auto = true})
nnoremap <silent> @√û <Nop>
nnoremap <silent> @ <Cmd>lua require("which-key").show("@", {mode = "n", auto = true})
nnoremap <silent> H <Cmd>BufferLineCyclePrev
nnoremap <silent> L <Cmd>BufferLineCycleNext
onoremap <silent> <expr> N 'nN'[v:searchforward]
xnoremap <silent> <expr> N 'nN'[v:searchforward]
nnoremap <silent> <expr> N 'nN'[v:searchforward]
nnoremap Y y$
onoremap <silent> [i <Cmd>lua MiniIndentscope.operator('top')
xnoremap <silent> [i <Cmd>lua MiniIndentscope.operator('top')
nnoremap <silent> [i <Cmd>lua MiniIndentscope.operator('top', true)
nnoremap <silent> [b <Cmd>BufferLineCyclePrev
xnoremap <silent> [√û <Nop>
xnoremap <silent> [ <Cmd>lua require("which-key").show("[", {mode = "v", auto = true})
nnoremap <silent> [√û <Nop>
nnoremap <silent> [ <Cmd>lua require("which-key").show("[", {mode = "n", auto = true})
omap <silent> [% <Plug>(MatchitOperationMultiBackward)
xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
nnoremap <silent> ]√û <Nop>
nnoremap <silent> ] <Cmd>lua require("which-key").show("]", {mode = "n", auto = true})
onoremap <silent> ]i <Cmd>lua MiniIndentscope.operator('bottom')
xnoremap <silent> ]i <Cmd>lua MiniIndentscope.operator('bottom')
nnoremap <silent> ]i <Cmd>lua MiniIndentscope.operator('bottom', true)
nnoremap <silent> ]b <Cmd>BufferLineCycleNext
xnoremap <silent> ]√û <Nop>
xnoremap <silent> ] <Cmd>lua require("which-key").show("]", {mode = "v", auto = true})
omap <silent> ]% <Plug>(MatchitOperationMultiForward)
xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
nnoremap <silent> ` <Cmd>lua require("which-key").show("`", {mode = "n", auto = true})
onoremap <silent> ai <Cmd>lua MiniIndentscope.textobject(true)
xnoremap <silent> ai <Cmd>lua MiniIndentscope.textobject(true)
omap <silent> <expr> al v:lua.MiniAi.expr_textobject('o', 'a', {'search_method': 'prev'})
omap <silent> <expr> an v:lua.MiniAi.expr_textobject('o', 'a', {'search_method': 'next'})
xmap <silent> <expr> al v:lua.MiniAi.expr_textobject('x', 'a', {'search_method': 'prev'})
xmap <silent> <expr> an v:lua.MiniAi.expr_textobject('x', 'a', {'search_method': 'next'})
omap <silent> <expr> a v:lua.MiniAi.expr_textobject('o', 'a')
xnoremap <silent> a√û <Nop>
xmap <silent> <expr> a v:lua.MiniAi.expr_textobject('x', 'a')
xmap a% <Plug>(MatchitVisualTextObject)
nnoremap <silent> ca√û <Nop>
nnoremap <silent> ci√û <Nop>
nnoremap <silent> c√û <Nop>
nnoremap <silent> c <Cmd>lua require("which-key").show("c", {mode = "n", auto = true})
nnoremap <silent> d√û <Nop>
nnoremap <silent> d <Cmd>lua require("which-key").show("d", {mode = "n", auto = true})
nnoremap <silent> da√û <Nop>
nnoremap <silent> di√û <Nop>
nnoremap <silent> g√û <Nop>
nnoremap <silent> g <Cmd>lua require("which-key").show("g", {mode = "n", auto = true})
xnoremap <silent> gw *N
nnoremap <silent> gw *N
omap <silent> <expr> g] v:lua.MiniAi.expr_motion('right')
omap <silent> <expr> g[ v:lua.MiniAi.expr_motion('left')
xmap <silent> <expr> g] v:lua.MiniAi.expr_motion('right')
xmap <silent> <expr> g[ v:lua.MiniAi.expr_motion('left')
nmap <silent> <expr> g] v:lua.MiniAi.expr_motion('right')
nmap <silent> <expr> g[ v:lua.MiniAi.expr_motion('left')
xnoremap <silent> gz√û <Nop>
xnoremap <silent> g√û <Nop>
xnoremap <silent> g <Cmd>lua require("which-key").show("g", {mode = "v", auto = true})
nnoremap <silent> gua√û <Nop>
nnoremap <silent> gui√û <Nop>
nnoremap <silent> gu√û <Nop>
nnoremap <silent> gUa√û <Nop>
nnoremap <silent> gUi√û <Nop>
nnoremap <silent> gU√û <Nop>
nnoremap <silent> g~a√û <Nop>
nnoremap <silent> g~i√û <Nop>
nnoremap <silent> g~√û <Nop>
nnoremap <silent> gz√û <Nop>
onoremap <silent> gc <Cmd>lua MiniComment.textobject()
nnoremap <silent> <expr> gcc v:lua.MiniComment.operator() . "_"
xnoremap <silent> gc :lua MiniComment.operator('visual')
nnoremap <silent> <expr> gc v:lua.MiniComment.operator()
xmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
omap <silent> g% <Plug>(MatchitOperationBackward)
xmap <silent> g% <Plug>(MatchitVisualBackward)
nmap <silent> g% <Plug>(MatchitNormalBackward)
onoremap <silent> ii <Cmd>lua MiniIndentscope.textobject(false)
xnoremap <silent> ii <Cmd>lua MiniIndentscope.textobject(false)
omap <silent> <expr> il v:lua.MiniAi.expr_textobject('o', 'i', {'search_method': 'prev'})
omap <silent> <expr> in v:lua.MiniAi.expr_textobject('o', 'i', {'search_method': 'next'})
xmap <silent> <expr> il v:lua.MiniAi.expr_textobject('x', 'i', {'search_method': 'prev'})
xmap <silent> <expr> in v:lua.MiniAi.expr_textobject('x', 'i', {'search_method': 'next'})
omap <silent> <expr> i v:lua.MiniAi.expr_textobject('o', 'i')
xnoremap <silent> i√û <Nop>
xmap <silent> <expr> i v:lua.MiniAi.expr_textobject('x', 'i')
nnoremap <silent> <expr> j v:count == 0 ? 'gj' : 'j'
nnoremap <silent> <expr> k v:count == 0 ? 'gk' : 'k'
onoremap <silent> <expr> n 'Nn'[v:searchforward]
xnoremap <silent> <expr> n 'Nn'[v:searchforward]
nnoremap <silent> <expr> n 'Nn'[v:searchforward]
nnoremap <silent> v√û <Nop>
nnoremap <silent> v <Cmd>lua require("which-key").show("v", {mode = "n", auto = true})
nnoremap <silent> va√û <Nop>
nnoremap <silent> vi√û <Nop>
nnoremap <silent> ya√û <Nop>
nnoremap <silent> yi√û <Nop>
nnoremap <silent> y√û <Nop>
nnoremap <silent> y <Cmd>lua require("which-key").show("y", {mode = "n", auto = true})
nnoremap <silent> zfa√û <Nop>
nnoremap <silent> zfi√û <Nop>
nnoremap <silent> zf√û <Nop>
nnoremap <silent> z√û <Nop>
nnoremap <silent> z <Cmd>lua require("which-key").show("z", {mode = "n", auto = true})
nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_directory(vim.fn.expand("%:p"))
snoremap <silent> <C-S> <Cmd>w
nnoremap <silent> <C-S> <Cmd>w
xnoremap <silent> <C-S> <Cmd>w
vnoremap <silent> <M-k> :m '<-2gv=gv
vnoremap <silent> <M-j> :m '>+1gv=gv
nnoremap <silent> <M-k> <Cmd>m .-2==
nnoremap <silent> <M-j> <Cmd>m .+1==
nnoremap <silent> <C-Right> <Cmd>vertical resize +2
nnoremap <silent> <C-Left> <Cmd>vertical resize -2
nnoremap <silent> <C-Down> <Cmd>resize -2
nnoremap <silent> <C-Up> <Cmd>resize +2
nnoremap <silent> <C-K> k
nnoremap <silent> <C-J> j
nnoremap <silent> <C-H> h
nnoremap <silent> <C-W>√û <Nop>
nnoremap <silent> <C-W> <Cmd>lua require("which-key").show("\23", {mode = "n", auto = true})
xnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))
xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
onoremap <silent> <Plug>(MatchitOperationMultiForward) :call matchit#MultiMatch("W",  "o")
onoremap <silent> <Plug>(MatchitOperationMultiBackward) :call matchit#MultiMatch("bW", "o")
xnoremap <silent> <Plug>(MatchitVisualMultiForward) :call matchit#MultiMatch("W",  "n")m'gv``
xnoremap <silent> <Plug>(MatchitVisualMultiBackward) :call matchit#MultiMatch("bW", "n")m'gv``
nnoremap <silent> <Plug>(MatchitNormalMultiForward) :call matchit#MultiMatch("W",  "n")
nnoremap <silent> <Plug>(MatchitNormalMultiBackward) :call matchit#MultiMatch("bW", "n")
onoremap <silent> <Plug>(MatchitOperationBackward) :call matchit#Match_wrapper('',0,'o')
onoremap <silent> <Plug>(MatchitOperationForward) :call matchit#Match_wrapper('',1,'o')
xnoremap <silent> <Plug>(MatchitVisualBackward) :call matchit#Match_wrapper('',0,'v')m'gv``
xnoremap <silent> <Plug>(MatchitVisualForward) :call matchit#Match_wrapper('',1,'v'):if col("''") != col("$") | exe ":normal! m'" | endifgv``
nnoremap <silent> <Plug>(MatchitNormalBackward) :call matchit#Match_wrapper('',0,'n')
nnoremap <silent> <Plug>(MatchitNormalForward) :call matchit#Match_wrapper('',1,'n')
nnoremap <silent> <C-L> l
inoremap <silent>  <Cmd>lua require("which-key").show("\18", {mode = "i", auto = true})
cnoremap <silent>  <Cmd>lua require("which-key").show("\18", {mode = "c", auto = true})
inoremap <silent>  <Cmd>w
inoremap  u
inoremap  u
inoremap <silent>  <Cmd>noh
inoremap <expr> " v:lua.MiniPairs.closeopen('""', "[^\\].")
inoremap <expr> ' v:lua.MiniPairs.closeopen("''", "[^%a\\].")
inoremap <expr> ( v:lua.MiniPairs.open("()", "[^\\].")
inoremap <expr> ) v:lua.MiniPairs.close("()", "[^\\].")
inoremap <silent> , ,u
inoremap <silent> . .u
inoremap <silent> ; ;u
inoremap <expr> [ v:lua.MiniPairs.open("[]", "[^\\].")
inoremap <expr> ] v:lua.MiniPairs.close("[]", "[^\\].")
inoremap <expr> ` v:lua.MiniPairs.closeopen("``", "[^\\].")
inoremap <silent> jk 
inoremap <expr> { v:lua.MiniPairs.open("{}", "[^\\].")
inoremap <expr> } v:lua.MiniPairs.close("{}", "[^\\].")
let &cpo=s:cpo_save
unlet s:cpo_save
set autowrite
set clipboard=unnamedplus
set cmdheight=0
set completeopt=menu,menuone,noinsert,noselect,preview
set confirm
set expandtab
set formatoptions=jcroqlnt
set grepformat=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set guicursor=a:NoiceHiddenCursor
set helplang=en
set ignorecase
set laststatus=3
set noloadplugins
set mouse=a
set packpath=/usr/local/share/nvim/runtime
set pumblend=10
set pumheight=10
set runtimepath=~/.config/LazyVim,~/.local/share/LazyVim/lazy/lazy.nvim,~/.local/share/LazyVim/lazy/telescope-fzf-native.nvim,~/.local/share/LazyVim/lazy/telescope.nvim,~/.local/share/LazyVim/lazy/mini.nvim,~/.local/share/LazyVim/lazy/neo-tree.nvim,~/.local/share/LazyVim/lazy/friendly-snippets,~/.local/share/LazyVim/lazy/LuaSnip,~/.local/share/LazyVim/lazy/cmp_luasnip,~/.local/share/LazyVim/lazy/cmp-path,~/.local/share/LazyVim/lazy/cmp-buffer,~/.local/share/LazyVim/lazy/cmp-emoji,~/.local/share/LazyVim/lazy/nvim-cmp,~/.local/share/LazyVim/lazy/nvim-navic,~/.local/share/LazyVim/lazy/plenary.nvim,~/.local/share/LazyVim/lazy/nvim-treesitter,~/.local/share/LazyVim/lazy/vim-illuminate,~/.local/share/LazyVim/lazy/todo-comments.nvim,~/.local/share/LazyVim/lazy/indent-blankline.nvim,~/.local/share/LazyVim/lazy/gitsigns.nvim,~/.local/share/LazyVim/lazy/null-ls.nvim,~/.local/share/LazyVim/lazy/cmp-nvim-lsp,~/.local/share/LazyVim/lazy/mason-lspconfig.nvim,~/.local/share/LazyVim/lazy/mason.nvim,~/.local/share/LazyVim/lazy/neodev.nvim,~/.local/share/LazyVim/lazy/neoconf.nvim,~/.local/share/LazyVim/lazy/typescript.nvim,~/.local/share/LazyVim/lazy/SchemaStore.nvim,~/.local/share/LazyVim/lazy/nvim-lspconfig,~/.local/share/LazyVim/lazy/persistence.nvim,~/.local/share/LazyVim/lazy/mini.indentscope,~/.local/share/LazyVim/lazy/nvim-web-devicons,~/.local/share/LazyVim/lazy/nvim-notify,~/.local/share/LazyVim/lazy/nui.nvim,~/.local/share/LazyVim/lazy/nvim-treesitter-textobjects,~/.local/share/LazyVim/lazy/mini.ai,~/.local/share/LazyVim/lazy/noice.nvim,~/.local/share/LazyVim/lazy/bufferline.nvim,~/.local/share/LazyVim/lazy/which-key.nvim,~/.local/share/LazyVim/lazy/mini.pairs,~/.local/share/LazyVim/lazy/lualine.nvim,~/.local/share/LazyVim/lazy/vim-repeat,~/.local/share/LazyVim/lazy/mini.comment,~/.local/share/LazyVim/lazy/mini.starter,~/.local/share/LazyVim/lazy/tokyonight.nvim,~/.local/share/LazyVim/lazy/LazyVim,/usr/local/share/nvim/runtime,/usr/local/share/nvim/runtime/pack/dist/opt/matchit,/usr/local/lib/nvim,~/.local/state/LazyVim/lazy/readme,~/.local/share/LazyVim/lazy/cmp_luasnip/after,~/.local/share/LazyVim/lazy/cmp-path/after,~/.local/share/LazyVim/lazy/cmp-buffer/after,~/.local/share/LazyVim/lazy/cmp-emoji/after,~/.local/share/LazyVim/lazy/cmp-nvim-lsp/after
set scrolloff=4
set sessionoptions=buffers,curdir,tabpages,winsize,folds,options
set shiftround
set shiftwidth=2
set shortmess=linFfTOCItWxoc
set noshowmode
set showtabline=2
set sidescrolloff=8
set smartcase
set smartindent
set splitbelow
set splitkeep=screen
set splitright
set statusline=%#Normal#
set tabline=%!v:lua.nvim_bufferline()
set tabstop=2
set termguicolors
set timeoutlen=300
set undofile
set undolevels=10000
set updatetime=200
set wildmode=longest:full,full
set window=37
set winminwidth=5
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/.config/LazyVim
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +1 ~/.config/LazyVim/init.lua
badd +62 ~/.config/LazyVim/lua/plugins/plugins.lua
badd +1 ~/.config/LazyVim/lua/config/lazy.lua
badd +21 ~/.config/LazyVim/lua/config/options.lua
badd +3 ~/.config/LazyVim/lua/config/autocmds.lua
badd +5 ~/.config/LazyVim/lua/config/keymaps.lua
badd +3699 ~/.local/share/LazyVim/lazy/neodev.nvim/types/nightly/options.1.lua
badd +1020 ~/.local/share/LazyVim/lazy/neodev.nvim/types/nightly/options.2.lua
argglobal
%argdel
edit ~/.config/LazyVim/lua/config/options.lua
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
argglobal
balt ~/.local/share/LazyVim/lazy/neodev.nvim/types/nightly/options.1.lua
let s:cpo_save=&cpo
set cpo&vim
nnoremap <buffer> <silent>  cl <Cmd>LspInfo
nnoremap <buffer>  cR TypescriptRenameFile
nnoremap <buffer>  co TypescriptOrganizeImports
nnoremap <buffer> <silent> gI <Cmd>Telescope lsp_implementations
nnoremap <buffer> <silent> gy <Cmd>Telescope lsp_type_definitions
nnoremap <buffer> <silent> gd <Cmd>Telescope lsp_definitions
nnoremap <buffer> <silent> gr <Cmd>Telescope lsp_references
xnoremap <buffer> <silent> <C-Space> :lua require'nvim-treesitter.incremental_selection'.node_incremental()
xnoremap <buffer> <silent> <BS> :lua require'nvim-treesitter.incremental_selection'.node_decremental()
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal cinscopedecls=public,protected,private
setlocal colorcolumn=
setlocal comments=:--
setlocal commentstring=--\ %s
setlocal complete=.,w,b,u,t
setlocal concealcursor=
set conceallevel=3
setlocal conceallevel=3
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal cursorlineopt=both
setlocal define=\\<function\\|\\<local\\%(\\s\\+function\\)\\=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'lua'
setlocal filetype=lua
endif
setlocal fillchars=
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=v:lua.vim.lsp.formatexpr()
setlocal formatoptions=jcroqlnt
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=
setlocal includeexpr=tr(v:fname,'.','/')
setlocal indentexpr=nvim_treesitter#indent()
setlocal indentkeys=0{,0},0),0],:,0#,!^F,o,O,e,0=end,0=until
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispoptions=
setlocal lispwords=
set list
setlocal list
setlocal listchars=
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=v:lua.vim.lsp.omnifunc
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal scrollback=-1
setlocal noscrollbind
setlocal scrolloff=-1
setlocal shiftwidth=2
setlocal showbreak=
setlocal sidescrolloff=-1
set signcolumn=yes
setlocal signcolumn=yes
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal spelloptions=noplainbuffer
setlocal statuscolumn=
setlocal statusline=%#lualine_a_command#\ COMMAND\ %#lualine_transitional_lualine_a_command_to_lualine_c_normal#ÓÇ∞%<%#lualine_c_normal#\ options.lua\ %#lualine_c_normal#%=%#lualine_c_normal#\ utf-8\ ÓÇ≥%#lualine_c_normal#\ Óúí\ ÓÇ≥%#lualine_x_filetype_DevIconLua_command#\ Óò†%#lualine_c_normal#\ lua\ %#lualine_transitional_lualine_b_command_to_lualine_c_normal#ÓÇ≤%#lualine_b_command#\ 23%%\ %#lualine_transitional_lualine_a_command_to_lualine_b_command#ÓÇ≤%#lualine_a_command#\ \ 21:1\ \ 
setlocal suffixesadd=.lua
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != ''
setlocal syntax=
endif
setlocal tagfunc=v:lua.vim.lsp.tagfunc
setlocal tabstop=2
setlocal tagcase=
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal thesaurusfunc=
setlocal undofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal virtualedit=
setlocal winbar=
setlocal winblend=0
setlocal winhighlight=
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let &fdl = &fdl
let s:l = 21 - ((13 * winheight(0) + 18) / 36)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 21
normal! 0
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
set shortmess=linFfTOCItWxoc
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
